Easy:

Q 1: https://leetcode.com/problems/minimum-positive-sum-subarray/description/
Original code:
class Solution {
public:
    int minimumSumSubarray(vector<int>& nums, int l, int r) {
        
        int minSum = INT_MAX;
        for(int i = l; i <= r; i++) {
            int currSum = 0;

            for(int j = 0; j < i; j++) {
                currSum += nums[j];
            }
            if(currSum > 0) {
                minSum = min(minSum, currSum);
            }

            int low = 0, high = i;

            while(high < nums.size()) {
                currSum -= nums[low];
                currSum += nums[high];

                low ++, high++;

                if(currSum > 0) {
                    minSum = min(minSum, currSum);
                }
            }
        }
        if(minSum == INT_MAX) return -1;
        return minSum;
    }
};
Syntax ERROR:
class Solution {
public:
    int minimumSumSubarray(vector<int>& nums, int l, int r) {
        
        int minSum = INT_MAX;
        for(int i = l; i <= r; i++) {
            int currSum = 0;

            for(int j = 0; j < i; j++) {
                currSum += nums[j];
            }
            if(currSum > 0) {
                minSum = min(minSum, currSum);
            }

            int low = 0, high = i;

            while(high < nums.size()) {
                currSum; -= nums[low];
                currSum += nums[high];

                low ++, high++;

                if(int currSum > 0) {
                    minSum = min(minSum, currSum);
                }
            }
        }
        if(minSum == INT_MAX) return -1;
        return minSum
    }
};
LOGIC ERROR:
class Solution {
public:
    int minimumSumSubarray(vector<int>& nums, int l, int r) {
        
        int minSum = INT_MAX;
        for(int i = l; i <= r; i++) {
            int currSum = 0;

            for(int j = 0; j < i; j++) {
                currSum += nums[j];
            }
            if(currSum > 0) {
                minSum = min(minSum, currSum);
            }

            int low = 0, high = i;

            while(high < nums.size()) {
                currSum -= nums[low];
                currSum += nums[high];

                low ++, high++;

                if(currSum > 0) {
                    minSum = min(minSum, currSum);
                }
            }
        }
        if(minSum != INT_MAX) return -1;
        return minSum;
    }
};
Q 2: https://leetcode.com/problems/stone-removal-game/description/
Original code:
class Solution {
public:
    bool canAliceWin(int n) {
        int stones[] = {19, 15, 11, 7, 3};
        for (int stone : stones) {
            if (n >= stone) {
                n -= stone;} 
            else {
                return n >= (stone / 2) + 1;}
        }
        return true;}
}
Syntax ERROR:
class Solution {
public:
    bool canAliceWin(int n) {
        int stones[] = {19, 15, 11, 7, 3};
        for (int stone  stones) {
            if (n >= stone) {
                n -= stone;} 
            else {
                return n >= (stone / 2) + 1;
        }
        return true}
}
LOGIC ERROR:
class Solution {
public:
    bool canAliceWin(int n) {
        int stones[] = { 11, 7, 3};
        for (int stone : stones) {
            if (n >= stone) {
                n -= stone;} 
            else {
                return n >= (stone / 2) + 1;}
        }
        return true;}
}
Q 3:
Original code:
Syntax ERROR:
LOGIC ERROR:

Medium:
Q 1:
Original code:
Syntax ERROR:
LOGIC ERROR:
Q 2:
Original code:
Syntax ERROR:
LOGIC ERROR:
Q 3:
Original code:
Syntax ERROR:
LOGIC ERROR:

Hard:
Q 1 https://leetcode.com/problems/maximize-sum-of-weights-after-edge-removals/description/:
original code:
    long long maximizeSumOfWeights(vector<vector<int>>& edges, int k) {
        int n = edges.size() + 1;
        vector<vector<pair<int, int>>> G(n);
        for (auto& e : edges) {
            G[e[0]].push_back({e[1], e[2]});
            G[e[1]].push_back({e[0], e[2]});
        }

        function<vector<long long>(int, int)> dfs = [&](int i, int pre) -> vector<long long> {
            long long res = 0, res2 = 0;
            vector<int> diff;
            for (auto& [j, w] : G[i]) {
                if (j == pre) continue;
                vector<long long> v = dfs(j, i);
                res += v[1];
                diff.push_back(max(0LL, v[0] + w - v[1]));
            }

            // Quick select
            if (diff.size() >= k) {
                nth_element(diff.begin(), diff.begin() + k - 1, diff.end(), greater<int>());
            }
            for (int i = 0; i < k - 1 && i < diff.size(); ++i) {
                res += diff[i];
            }
            res2 = diff.size() >= k ? res + diff[k - 1] : res;
            return {res, res2};
        };

        return dfs(0, -1)[1];
    }
Syntax ERROR:
class Solution {
public:
        long long maximizeSumOfWeights(vector<vector<int>>& edges, int k) {
        int n = edges.size() + 1;
        vector<vector<pair<int, int>>> G(n);
        for (auto& e : edges) {
            G[e[0]].push_back({e[1], e[2]});
            G[e[1]].push_back({e[0], e[2]});
        }

        function<vector<long long>(int, int)> dfs = [&](int i, int pre) -> vector<long long> {
            long long res = 0, res2 = 0;
            vector<int*> diff;
            for (auto& [j, w] : G[i]) {
                if (j == pre) continue;
                vector<long long> v = dfs(j, i);
                res += v[1];
                diff.push_back(max(0LL, v[0] + w - v[1]]))
            }

            // Quick select
            if (diff.size() >= k) {
                nth_element(diff.begin(), diff.begin() + k - 1, diff.end(), greater<int>());
            }
            for (int i = 0; i < k - 1 && i < diff.size(); ++i) {
                res += diff[i];
            }
            res2 = diff.size() >= k ? res + diff[k - 1] : res;
            return {res, res2};
        };

        return dfs(0, -1)[1];
    }
    
};

LOGIC ERROR:
class Solution {
public:
    long long maximizeSumOfWeights(vector<vector<int>>& edges, int k) {
        int n = edges.size() + 1;
        vector<vector<pair<int, int>>> G(n);
        for (auto& e : edges) {
            G[e[0]].push_back({e[1], e[2]});
            G[e[1]].push_back({e[0], e[2]});
        }

        function<vector<long long>(int, int)> dfs = [&](int i, int pre) -> vector<long long> {
            long long res = 0, res2 = 0;
            vector<int> diff;
            for (auto& [j, w] : G[i]) {
                if (j == pre) continue;
                vector<long long> v = dfs(j, i);
                res += v[1];
                diff.push_back(max(0LL, v[0] + w - v[1]));
            }

            // Quick select
            if (diff.size() > k) {
                nth_element(diff.begin(), diff.begin() + k - 1, diff.end(), greater<int>());
            }
            for (int i = 0; i < k - 1 && i < diff.size(); ++i) {
                res += diff[i];
            }
            res2 = diff.size() >= k ? res + diff[k - 1] : res;
            return {res, res2};
        };

        return dfs(0, -1)[1];
    }
    }
};


Q 2: https://leetcode.com/problems/check-if-dfs-strings-are-palindromes/description/
Original Code:
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> adj;  // Adjacency list to store the tree structure
    vector<bool> ans;  // To store results for each node
    string dfsStr;  // To store concatenated characters from DFS traversal
    vector<array<int, 3>> evenPalindromes, oddPalindromes;  // Store node, length for palindromes

    // Manacher's Algorithm for odd-length palindromes
    vector<int> manacher_odd(const string& s) {
        int n = s.size();
        vector<int> p(n, 0);  // Store radius of palindromes
        int l = 0, r = 0;

        for (int i = 0; i < n; i++) {
            if (i < r) {
                p[i] = min(p[l + (r - i)], r - i);  // Get minimum palindrome length based on mirror position
            }
            // Expand around the center to find palindromes
            while (i - p[i] >= 0 && i + p[i] < n && s[i - p[i]] == s[i + p[i]]) {
                p[i]++;
            }
            // Update the left and right bounds
            if (i + p[i] > r) {
                l = i - p[i];
                r = i + p[i];
            }
        }
        return p;
    }

    // To handle even-length palindromes, we use a "hashtag" transformation
    string hashtag(const string& s) {
        string res(2 * s.size() + 1, '#');
        for (int i = 0; i < s.size(); i++) {
            res[2 * i + 1] = s[i];
        }
        return res;
    }

    // DFS to traverse the tree and collect the characters in dfsStr
    void dfs(int node, const string& s, int& index) {
        int start = index;

        // Traverse the subtree of the current node
        for (int child : adj[node]) {
            dfs(child, s, index);
        }

        dfsStr[index++] = s[node];

        int end = index - 1;
        int length = end - start + 1;

        if (length % 2 == 0) {
            int mid = (start + end) / 2;
            evenPalindromes.push_back({2 * (mid + 1), length, node});
        } else {
            oddPalindromes.push_back({(start + end) / 2, (length + 1) / 2, node});
        }
    }

    vector<bool> findAnswer(vector<int>& parent, string s) {
        int n = parent.size();
        adj.resize(n);
        ans.resize(n, false);
        dfsStr.resize(n);

        // Build the tree from the parent array
        for (int i = 1; i < n; i++) {
            adj[parent[i]].push_back(i);
        }

        int index = 0;
        dfs(0, s, index);  // Start DFS from the root

        // Apply Manacher's algorithm on the DFS traversal string
        vector<int> oddLengths = manacher_odd(dfsStr);
        vector<int> evenLengths = manacher_odd(hashtag(dfsStr));

        // Check odd-length palindromes
        for (auto& entry : oddPalindromes) {
            if (oddLengths[entry[0]] >= entry[1]) {
                ans[entry[2]] = true;
            }
        }

        // Check even-length palindromes
        for (auto& entry : evenPalindromes) {
            if (evenLengths[entry[0]] >= entry[1]) {
                ans[entry[2]] = true;
            }
        }

        return ans;
    }
};

Syntax ERROR:
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> adj;  // Adjacency list to store the tree structure
    vector<bool> ans;  // To store results for each node
    string dfsStr;  // To store concatenated characters from DFS traversal
    vector<array<int, 3>> evenPalindromes, oddPalindromes;  // Store node, length for palindromes

    // Manacher's Algorithm for odd-length palindromes
    vector<int> manacher_odd(const string& s) {
        int n = s.size();
        vector<int> p(n, 0);  // Store radius of palindromes
        int l = 0, r = 0;

        for (int i = 0; i < n; i++) {
            if (i < r) {
                p[i] = min(p[l + (r - i)], r - i);  // Get minimum palindrome length based on mirror position
            }
            // Expand around the center to find palindromes
            while (i - p[i] >= 0 && i + p[i] < n && s[i - p[i]] == s[i + p[i]]) {
                p[i]++;
            }
            // Update the left and right bounds
            if (i + p[i] > r) {
                l = i - p[i];
                r = i + p[i];
            }
        }
        return p;
    }

    // To handle even-length palindromes, we use a "hashtag" transformation
    string hashtag(const string& s) {
        string res(2 * s.size() + 1, '#');
        for (int i = 0; i < s.size(); i++) {
            res[2 * i + 1] = s[i];
        }
        return res;
    }

    // DFS to traverse the tree and collect the characters in dfsStr
    void dfs(int node, const string& s, int& index) {
        int start = index;

        // Traverse the subtree of the current node
        for (int child : adj[node]) {
            dfs(child, s, index);
        }

        dfsStr[index++] = s[node];

        int end = index - 1;
        int length = end - start + 1;

        if (length % 2 == 0) {
            int mid = (start + end) / 2;
            evenPalindromes.push_back({2 * (mid + 1), length, node});
        } else {
            oddPalindromes.push_back({(start + end) / 2, (length + 1) / 2, node});
        }
    }

    vector<bool> findAnswer(vector<int>& parent, string s) {
        int n = parent.size();
        adj.resize(n);
        ans.resize(n, false);
        dfsStr.resize(n);

        // Build the tree from the parent array
        for (int i = 1; i < n; i++) {
            adj[parent[i]].push_back(i);
        }

        int index = 0;
        dfs(0, s, index);  // Start DFS from the root

        // Apply Manacher's algorithm on the DFS traversal string
        vector<int> oddLengths = manacher_odd(dfsStr);
        vector<int*> evenLengths = manacher_odd(hashtag(dfsStr));

        // Check odd-length palindromes
        for (auto& entry : oddPalindromes) {
            if (oddLengths[entry[0]] >= entry[1]) {
                ans[entry[2]]] = true;
            }
        }

        // Check even-length palindromes
        for (auto& entry : evenPalindromes) {
            if (evenLengths[entry[0]] >= entry[1]) {
                ans[entry[2]] = true;
            }
        }

        return ans
    }
};

LOGIC ERROR:
#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> adj;  // Adjacency list to store the tree structure
    vector<bool> ans;  // To store results for each node
    string dfsStr;  // To store concatenated characters from DFS traversal
    vector<array<int, 3>> evenPalindromes, oddPalindromes;  // Store node, length for palindromes

    // Manacher's Algorithm for odd-length palindromes
    vector<int> manacher_odd(const string& s) {
        int n = s.size();
        vector<int> p(n, 0);  // Store radius of palindromes
        int l = 0, r = 0;

        for (int i = 0; i < n; i++) {
            if (i < r) {
                p[i] = min(p[l + (r - i)], r - i);  // Get minimum palindrome length based on mirror position
            }
            // Expand around the center to find palindromes
            while (i - p[i] >= 0 && i + p[i] < n && s[i - p[i]] == s[i + p[i]]) {
                p[i]++;
            }
            // Update the left and right bounds
            if (i + p[i] > r) {
                l = i - p[i];
                r = i + p[i];
            }
        }
        return p;
    }

    // To handle even-length palindromes, we use a "hashtag" transformation
    string hashtag(const string& s) {
        string res(2 * s.size() + 1, '#');
        for (int i = 0; i < s.size(); i++) {
            res[2 * i + 1] = s[i];
        }
        return res;
    }

    // DFS to traverse the tree and collect the characters in dfsStr
    void dfs(int node, const string& s, int& index) {
        int start = index;

        // Traverse the subtree of the current node
        for (int child : adj[node]) {
            dfs(child, s, index);
        }

        dfsStr[index++] = s[node];

        int end = index - 1;
        int length = end - start + 1;

        if (length % 2 == 0) {
            int mid = (start + end) / 2;
            evenPalindromes.push_back({2 * (mid + 1), length, node});
        } else {
            oddPalindromes.push_back({(start + end) / 2, (length + 1) / 2, node});
        }
    }

    vector<bool> findAnswer(vector<int>& parent, string s) {
        int n = parent.size();
        adj.resize(n);
        ans.resize(n, false);
        dfsStr.resize(n);

        // Build the tree from the parent array
        for (int i = 0; i < n; i++) {
            adj[parent[i]].push_back(i);
        }

        int index = 0;
        dfs(0, s, index);  // Start DFS from the root

        // Apply Manacher's algorithm on the DFS traversal string
        vector<int> oddLengths = manacher_odd(dfsStr);
        vector<int> evenLengths = manacher_odd(hashtag(dfsStr));

        // Check odd-length palindromes
        for (auto& entry : oddPalindromes) {
            if (oddLengths[entry[0]] >= entry[1]) {
                ans[entry[2]] = true;
            }
        }

        // Check even-length palindromes
        for (auto& entry : evenPalindromes) {
            if (evenLengths[entry[0]] >= entry[1]) {
                ans[entry[2]] = true;
            }
        }

        return ans;
    }
};


Q 3: https://leetcode.com/problems/construct-2d-grid-matching-graph-layout/description/
Original code:
class Solution {
public:
    vector<vector<int>> constructGridLayout(int n, vector<vector<int>>& edges) {
        // Step 1: Create an adjacency list to represent the graph
        vector<list<int>> graph(n);
        for (const auto& e : edges) {
            // Add both directions since it's an undirected graph
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }

        // Step 2: Initialize adjacency counts and degree categories
        vector<int> adj(n);
        vector<int> adjNum(5, 0); // To count how many nodes have degree 0 to 4
        vector<int> adj1, adj2; // To store nodes with degree 1 and 2

        // Count degrees of each node
        for (int i = 0; i < n; i++) {
            adj[i] = graph[i].size(); // Degree of node i
            adjNum[adj[i]]++; // Increment the count for the corresponding degree
            if (adj[i] == 1) adj1.push_back(i); // Store nodes with degree 1
            if (adj[i] == 2) adj2.push_back(i); // Store nodes with degree 2
        }

        vector<vector<int>> res; // Result grid to return
        if (adjNum[1] == 2) { // If there are exactly two nodes with degree 1
            res.resize(1, vector<int>(n)); // Initialize a single row for result
            int start = adj1[0]; // Start from one of the degree 1 nodes
            int i = 0; // To track position in the result row
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the chosen node
            v[start] = true; // Mark the starting node as visited

            // BFS to traverse the graph and fill the result row
            while (!q.empty()) {
                int cur = q.front(); // Current node
                q.pop();
                res[0][i++] = cur; // Add current node to the result row
                for (int next : graph[cur]) {
                    if (!v[next]) { // If the next node hasn't been visited
                        v[next] = true; // Mark it as visited
                        q.push(next); // Add it to the queue for BFS
                    }
                }
            }
            return res; // Return the result if we only need a single row
        } else {
            // If we have more complex connections (nodes with degree 2)
            int height = 0;
            int width = 0;
            int start = adj2[0]; // Start from one of the degree 2 nodes
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the degree 2 node
            v[start] = true; // Mark the starting node as visited
            vector<vector<int>> list; // To store nodes level-wise
            int l = 0; // Level counter

            // BFS to explore the graph level by level
            while (!q.empty()) {
                int size = q.size(); // Number of nodes at the current level
                l++; // Increment level counter
                vector<int> nextLevel; // Nodes at the next level
                int cur = q.front(); // Current node
                q.pop();
                nextLevel.push_back(cur); // Add current node to next level
                int min = -1; // Variable to find the minimum degree neighbor

                // Find the minimum degree neighbor that hasn't been visited
                for (int next : graph[cur]) {
                    if (!v[next] && (min == -1 || adj[min] > adj[next])) {
                        min = next; // Update minimum degree neighbor
                    }
                }

                // If we found a minimum degree neighbor, process it
                if (min != -1) {
                    q.push(min); // Add it to the queue
                    v[min] = true; // Mark it as visited
                    // Check if this neighbor is one of the degree 2 nodes
                    if (min != start && find(adj2.begin(), adj2.end(), min) != adj2.end() && height == 0) {
                        height = l + 1; // Set height based on level
                    }
                }

                // Process all other neighbors of the current node
                for (int next : graph[cur]) {
                    if (!v[next]) { // If not visited
                        v[next] = true; // Mark as visited
                        q.push(next); // Add to the queue
                    }
                }

                size--; // Decrease the level node count
                // Process remaining nodes at the current level
                while (size-- > 0) {
                    cur = q.front(); // Current node
                    q.pop();
                    nextLevel.push_back(cur); // Add to next level

                    // If this is a degree 2 node, track width
                    if (find(adj2.begin(), adj2.end(), cur) != adj2.end()) {
                        if (width == 0) width = l; // Set width based on first degree 2 node found
                    }

                    for (int next : graph[cur]) { // Explore neighbors
                        if (!v[next]) { // If not visited
                            v[next] = true; // Mark as visited
                            q.push(next); // Add to queue
                        }
                    }
                }
                list.push_back(nextLevel); // Store the current level's nodes
            }

            // Step 3: Prepare the result grid based on levels captured
            res.resize(height, vector<int>(width)); // Initialize result grid
            int lvl = -1; // Level index for placing nodes

            // Populate the result grid based on captured levels
            for (const auto& level : list) {
                int size = level.size(); // Number of nodes at this level
                lvl++; // Increment level index
                int row = min(lvl, height - 1); // Determine row index
                int col = lvl - row; // Determine column index
                for (int j = 0; j < size; j++) {
                    int val = level[j]; // Current node value
                    res[row - j][col + j] = val; // Place the value in the grid
                }
            }
        }
        return res;
    }
};

Syntax ERROR:
class Solution {
public:
    vector<vector<int>> constructGridLayout(int n, vector<vector<int>>& edges) {
        // Step 1: Create an adjacency list to represent the graph
        vector<list<int>> graph(n);
        for (const auto& e : edges) {
            // Add both directions since it's an undirected graph
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }

        // Step 2: Initialize adjacency counts and degree categories
        vector<int> adj(n);
        vector<int> adjNum(5, 0); // To count how many nodes have degree 0 to 4
        vector<int> adj1, adj2; // To store nodes with degree 1 and 2

        // Count degrees of each node
        for (int i = 0; i < n; i++) {
            adj[i] = graph[i].size(); // Degree of node i
            adjNum[adj[i]]++; // Increment the count for the corresponding degree
            if (adj[i] == 1) adj1.push_back(i); // Store nodes with degree 1
            if (adj[i] == 2) adj2.push_back(i); // Store nodes with degree 2
        }

        vector<vector<int>> res; // Result grid to return
        if (adjNum[1] == 2) { // If there are exactly two nodes with degree 1
            res.resize(1, vector<int>(n)); // Initialize a single row for result
            int start = adj1[0]; // Start from one of the degree 1 nodes
            int i = 0; // To track position in the result row
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the chosen node
            v[start] = true; // Mark the starting node as visited

            // BFS to traverse the graph and fill the result row
            while (!q.empty()) {
                int cur = q.front(); // Current node
                q.pop();
                res[0][i++] = cur; // Add current node to the result row
                for (int next : graph[cur]) {
                    if (!v[next]) { // If the next node hasn't been visited
                        v[next] = true; // Mark it as visited
                        q.push(next); // Add it to the queue for BFS
                    }
                }
            }
            return res; // Return the result if we only need a single row
        } else {
            // If we have more complex connections (nodes with degree 2)
            int height = 0;
            int width = 0;
            int start = adj2[0]; // Start from one of the degree 2 nodes
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the degree 2 node
            v[start] = true; // Mark the starting node as visited
            vector<vector<int>> list; // To store nodes level-wise
            int l = 0; // Level counter

            // BFS to explore the graph level by level
            while (!q.empty()) {
                int size = q.size(); // Number of nodes at the current level
                l++; // Increment level counter
                vector<int> nextLevel; // Nodes at the next level
                int cur = q.front(); // Current node
                q.pop();
                nextLevel.push_back(cur); // Add current node to next level
                int min = -1; // Variable to find the minimum degree neighbor

                // Find the minimum degree neighbor that hasn't been visited
                for (int next : graph[cur]) {
                    if (!v[next] && (min == -1 || adj[min] > adj[next])) {
                        min = next; // Update minimum degree neighbor
                    }
                }

                // If we found a minimum degree neighbor, process it
                if (min != -1) {
                    q.push(min); // Add it to the queue
                    v[min] = true; // Mark it as visited
                    // Check if this neighbor is one of the degree 2 nodes
                    if (min != start && find(adj2.begin(), adj2.end(), min) != adj2.end() && height == 0) {
                        height = l + 1; // Set height based on level
                    }
                }

                // Process all other neighbors of the current node
                for (int next : graph[cur]) {
                    if (!v[next]) { // If not visited
                        v[next] = true; // Mark as visited
                        q.push(next); // Add to the queue
                    }
                }

                size--; // Decrease the level node count
                // Process remaining nodes at the current level
                while (size-- > 0) {
                    cur = q.front(); // Current node
                    q.pop();
                    nextLevel.push_back(cur); // Add to next level

                    // If this is a degree 2 node, track width
                    if (find(adj2.begin(), adj2.end(), cur) != adj2.end()) {
                        if (width == 0) width = l; // Set width based on first degree 2 node found
                    }

                    for (int next : graph[cur]) { // Explore neighbors
                        if (!v[next]) { // If not visited
                            v[next] = true; // Mark as visited
                            q.push(next); // Add to queue
                        }
                    }
                }
                list.push_back(nextLevel); // Store the current level's nodes
            }

            // Step 3: Prepare the result grid based on levels captured
            res.resize(height, vector<int>(width)); // Initialize result grid
            int lvl = -1; // Level index for placing nodes

            // Populate the result grid based on captured levels
            for (const auto& level : list) {
                int size = level.size(); // Number of nodes at this level
                lvl++; // Increment level index
                int row = min(lvl, height - 1); // Determine row index
                int col = lvl - row; // Determine column index
                for (int j = 0; j < size j++) {
                    int val  level[j]; // Current node value
                    res[row - j][col + j] = val; // Place the value in the grid
                }
            }
        }
        return res
    }
};

LOGIC ERROR:
class Solution {
public:
    vector<vector<int>> constructGridLayout(int n, vector<vector<int>>& edges) {
        // Step 1: Create an adjacency list to represent the graph
        vector<list<int>> graph(n);
        for (const auto& e : edges) {
            // Add both directions since it's an undirected graph
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }

        // Step 2: Initialize adjacency counts and degree categories
        vector<int> adj(n);
        vector<int> adjNum(5, 0); // To count how many nodes have degree 0 to 4
        vector<int> adj1, adj2; // To store nodes with degree 1 and 2

        // Count degrees of each node
        for (int i = 0; i < n; i++) {
            adj[i] = graph[i].size(); // Degree of node i
            adjNum[adj[i]]++; // Increment the count for the corresponding degree
            if (adj[i] == 1) adj1.push_back(i); // Store nodes with degree 1
            if (adj[i] == 2) adj2.push_back(i); // Store nodes with degree 2
        }

        vector<vector<int>> res; // Result grid to return
        if (adjNum[1] == 2) { // If there are exactly two nodes with degree 1
            res.resize(1, vector<int>(n)); // Initialize a single row for result
            int start = adj1[0]; // Start from one of the degree 1 nodes
            int i = 0; // To track position in the result row
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the chosen node
            v[start] = true; // Mark the starting node as visited

            // BFS to traverse the graph and fill the result row
            while (!q.empty()) {
                int cur = q.front(); // Current node
                q.pop();
                res[0][i++] = cur; // Add current node to the result row
                for (int next : graph[cur]) {
                    if (!v[next]) { // If the next node hasn't been visited
                        v[next] = true; // Mark it as visited
                        q.push(next); // Add it to the queue for BFS
                    }
                }
            }
            return res; // Return the result if we only need a single row
        } else {
            // If we have more complex connections (nodes with degree 2)
            int height = 0;
            int width = 0;
            int start = adj2[0]; // Start from one of the degree 2 nodes
            vector<bool> v(n, false); // Visited nodes tracker
            queue<int> q; // Queue for BFS
            q.push(start); // Start BFS from the degree 2 node
            v[start] = true; // Mark the starting node as visited
            vector<vector<int>> list; // To store nodes level-wise
            int l = 0; // Level counter

            // BFS to explore the graph level by level
            while (!q.empty()) {
                int size = q.size(); // Number of nodes at the current level
                l++; // Increment level counter
                vector<int> nextLevel; // Nodes at the next level
                int cur = q.front(); // Current node
                q.pop();
                nextLevel.push_back(cur); // Add current node to next level
                int min = -1; // Variable to find the minimum degree neighbor

                // Find the minimum degree neighbor that hasn't been visited
                for (int next : graph[cur]) {
                    if (!v[next] && (min == -1 || adj[min] > adj[next])) {
                        min = next; // Update minimum degree neighbor
                    }
                }

                // If we found a minimum degree neighbor, process it
                if (min != -1) {
                    q.push(min); // Add it to the queue
                    v[min] = true; // Mark it as visited
                    // Check if this neighbor is one of the degree 2 nodes
                    if (min != start && find(adj2.begin(), adj2.end(), min) != adj2.end() && height == 0) {
                        height = l + 1; // Set height based on level
                    }
                }

                // Process all other neighbors of the current node
                for (int next : graph[cur]) {
                    if (!v[next]) { // If not visited
                        v[next] = true; // Mark as visited
                        q.push(next); // Add to the queue
                    }
                }

                size--; // Decrease the level node count
                // Process remaining nodes at the current level
                while (size-- > 0) {
                    cur = q.front(); // Current node
                    q.pop();
                    nextLevel.push_back(cur); // Add to next level

                    // If this is a degree 2 node, track width
                    if (find(adj2.begin(), adj2.end(), cur) != adj2.end()) {
                        if (width == 0) width = l; // Set width based on first degree 2 node found
                    }

                    for (int next : graph[cur]) { // Explore neighbors
                        if (!v[next]) { // If not visited
                            v[next] = true; // Mark as visited
                            q.push(next); // Add to queue
                        }
                    }
                }
                list.push_back(nextLevel); // Store the current level's nodes
            }

            // Step 3: Prepare the result grid based on levels captured
            res.resize(height, vector<int>(width)); // Initialize result grid
            int lvl = -1; // Level index for placing nodes

            // Populate the result grid based on captured levels
            for (const auto& level : list) {
                int size = level.size(); // Number of nodes at this level
                lvl++; // Increment level index
                int row = min(lvl, height ); // Determine row index
                int col = lvl - row; // Determine column index
                for (int j = 0; j < size; j++) {
                    int val = level[j]; // Current node value
                    res[row - j][col + j] = val; // Place the value in the grid
                }
            }
        }
        return res;
    }
};



